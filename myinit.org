* User Info
#+BEGIN_SRC emacs-lisp
(setq user-full-name "Andreas Wacknitz")
(setq user-mail-address "a.wacknitz@gmx.de")
#+END_SRC
* UTF-8
#+BEGIN_SRC emacs-lisp
  (set-language-environment 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-selection-coding-system 'utf-8)
  (prefer-coding-system 'utf-8)
  (setq locale-coding-system 'utf-8)
#+END_SRC
* use-package tweaks
#+BEGIN_SRC emacs-lisp
  ;; Set the default to automatically install packages if they are not availably yet.
  (setq use-package-always-ensure t)
  (eval-when-compile
    (require 'use-package))
#+END_SRC
* Keyboard bindings
** Explanations about Emacs special keys
| Notation | Symbolics Keyboard | PC keyboard | Mac keyboard |
|----------+--------------------+-------------+--------------|
| C        | Control            | <ctrl>      | <ctrl>       |
| M        | Meta               | <alt>       | <option>     |
| s        | Super              |             | <command>    |
| H        | Hyper              | <windows>   | <fn>         |
| S        | Shift              | <shift>     | <shift>      |
** settings
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "<f5>") 'speedbar)
(global-set-key (kbd "<f12>") 'make-frame-command)

#+END_SRC
* Interface tweaks
*** Use better defaults
#+BEGIN_SRC emacs-lisp
(setq-default
  ;; Don't use the compiled code if its the older package.
  load-prefer-newer t

  ;; Do not show the startup message.
  inhibit-startup-message t

  ;; Do not put 'customize' config in init.el; give it another file.
  custom-file (expand-file-name "custom.el" user-emacs-directory)

  ;; 72 is too less for the fontsize that I use.
  fill-column 90

  ;; Do not create lockfiles.
  create-lockfiles nil

  ;; Indentation
  tab-width 4

  ;; Don't use hard tabs
  indent-tabs-mode nil

  ;; Emacs can automatically create backup files. This tells Emacs to put all backups in
  ;; ~/.emacs.d/backups. More info:
  ;; http://www.gnu.org/software/emacs/manual/html_node/elisp/Backup-Files.html
  backup-directory-alist `(("." . ,(concat user-emacs-directory "backups")))

  ;; Do not autosave.
  auto-save-default nil

  ;; Allow commands to be run on minibuffers.
  enable-recursive-minibuffers t

  ;; Word Wrap (t is no wrap, nil is wrap)
  truncate-lines nil

  ;; Change cursor
  cursor-type 'box

  ;; Sentences do not need double spaces to end.
  sentence-end-double-space nil
)

  ;; Change all yes/no questions to y/n type
  (fset 'yes-or-no-p 'y-or-n-p)

  ;; `C-x o' is a 2 step key binding. `M-o' is much easier.
  (global-set-key (kbd "M-o") 'other-window)

  ;; Delete whitespace just when a file is saved.
  (add-hook 'before-save-hook 'delete-trailing-whitespace)

  ;; Enable narrowing commands.
  (put 'narrow-to-region 'disabled nil)
  (put 'narrow-to-page 'disabled nil)

  ;; Display column number in mode line.
  (column-number-mode t)
  (line-number-mode t)

  ;; Automatically update buffers if file content on the disk has changed.
  (global-auto-revert-mode t)

  ;; Reduce the frequency of garbage collection (default is 0.76MB, this sets it to 100 MB)
  (setq gc-cons-threshold (* 100 1024 1024))
  (setq show-paren-delay 0)                  ;; Show matching parens
  (show-paren-mode 1)
  (save-place-mode t)                        ;; Save places

  (cua-mode t)

  (setq backup-directory-alist        ;; Write backup files to own directory
    `(("." . ,(expand-file-name
                (concat user-emacs-directory "backups")))))
  (setq initial-major-mode 'org-mode) ;; Productive default mode
  (setq save-interprogram-paste-before-kill nil) ;; Fix empty pasteboard error.

  (setq visible-bell nil)            ;; quiet, please! No dinging!
  (setq ring-bell-function 'ignore)
  (setq make-backup-files nil)       ;; No Backup Files

  (when window-system
    (setq frame-title-format '(buffer-file-name "%f" ("%b"))))

  (setq echo-keystrokes 0.1)          ;; Show keystrokes in progress
  (setq delete-by-moving-to-trash t)  ;; Move files to trash when deleting
  (auto-compression-mode t)           ;; Transparently open compressed files
  (electric-pair-mode 1)              ;; Auto-close brackets and double quotes
  (delete-selection-mode 1)           ;; Remove text in active region if inserting text

  ;; Smooth Scroll:
  (setq mouse-wheel-scroll-amount '(1 ((shift) .1))) ;; one line at a time
  (setq scroll-conservatively 10000)                 ;; Scrol one line when hitting bottom of window

  (setq browse-url-browser-function 'browse-url-xdg-open)

  ;; eval-expression-print-level needs to be set to nil (turned off) so
  ;; that you can always see what's happening.
  (setq eval-expression-print-level nil)

  (put 'upcase-region 'disabled nil)
  (setq require-final-newline t)

  (defalias 'list-buffers 'ibuffer)

  (load custom-file 'NOERROR)
#+END_SRC
*** Disable unnecessary UI elements
#+BEGIN_SRC emacs-lisp
(progn
  ;; Do not show menu bar.
  ;;(menu-bar-mode -1)

  ;; Do not show tool bar.
  (when (fboundp 'tool-bar-mode)
    (tool-bar-mode -1))

  ;; Do not show scroll bar.
  (when (fboundp 'scroll-bar-mode)
    (scroll-bar-mode -1))

  ;; Do not show tooltips
  (when (fboundp 'tooltip-mode)
    (tooltip-mode -1))

  ;; Highlight line on point.
  (global-hl-line-mode t))
#+END_SRC
*** Font settings
#+BEGIN_SRC emacs-lisp
  (if window-system
      (if (> (x-display-pixel-height) 1200)
          (set-frame-font "Fira Code 20" nil t)
        (set-frame-font "Fira Code 15" nil t)))
#+END_SRC
*** Set frame size
#+BEGIN_SRC emacs-lisp
  (defun set-frame-size-according-to-resolution ()
    (interactive)
    (if window-system
        (progn
          (if (> (x-display-pixel-width) 1280)
              (add-to-list 'default-frame-alist (cons 'width 120))
            (add-to-list 'default-frame-alist (cons 'width 80)))
          (add-to-list 'default-frame-alist
                      (cons 'height (min 38 (/ (- (x-display-pixel-height) 320)
                                          (frame-char-height))))))))
  (set-frame-size-according-to-resolution)
#+END_SRC
*** Icons
    https://github.com/domtronn/all-the-icons.el
    https://github.com/asok/all-the-icons-ivy
    https://github.com/ryuslash/mode-icons
    Remember to install the font files:
    M-x all-the-icons-install-fonts
#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons
    :config (setq all-the-icons-scale-factor 1.0))

  (use-package all-the-icons-ivy
    :config
    (setq all-the-icons-ivy-buffer-commands '())
    (setq all-the-icons-ivy-file-commands
          '(counsel-find-file counsel-file-jump counsel-recentf counsel-projectile-find-file counsel-projectile-find-dir))
    :hook (after-init . all-the-icons-ivy-setup))

  (use-package mode-icons
    :config
    (mode-icons-mode))
#+END_SRC
*** Tabs
#+BEGIN_SRC emacs-lisp
  (use-package centaur-tabs
    :demand
    :init (setq centaur-tabs-set-bar 'over)
    :config
    (centaur-tabs-mode +1)
    (centaur-tabs-headline-match)
    (setq centaur-tabs-set-modified-marker t
          centaur-tabs-modified-marker " ● "
          centaur-tabs-cycle-scope 'tabs
          centaur-tabs-height 30
          centaur-tabs-set-icons t
          centaur-tabs-close-button " × ")
    (when (member "Arial" (font-family-list))
        (centaur-tabs-change-fonts "Arial" 130))
    (centaur-tabs-group-by-projectile-project)
    :bind
    ("C-S-<tab>" . centaur-tabs-backward)
    ("C-<tab>" . centaur-tabs-forward))
#+END_SRC
*** telephone-line
    Better mode line
#+BEGIN_SRC emacs-lisp
  (use-package powerline
    :config
    (powerline-center-theme))
#+END_SRC
*** pretty - base set of pretty symbols.
#+BEGIN_SRC emacs-lisp
  (defvar base-prettify-symbols-alist '(("lambda" . ?λ)))

  (defun my-lisp-prettify-symbols-hook ()
    "Set pretty symbols for lisp modes."
    (setq prettify-symbols-alist base-prettify-symbols-alist))

  (defun my-python-prettify-symbols-hook ()
    "Set pretty symbols for python."
    (setq prettify-symbols-alist base-prettify-symbols-alist))

  (defun my-js-prettify-symbols-hook ()
    "Set pretty symbols for JavaScript."
    (setq prettify-symbols-alist
          (append '(("function" . ?ƒ)) base-prettify-symbols-alist)))

  (defun my-prettify-symbols-hook ()
    "Set pretty symbols for non-lisp programming modes."
    (setq prettify-symbols-alist
          (append '(("==" . ?≡)
                    ("!=" . ?≠)
                    ("<=" . ?≤)
                    (">=" . ?≥)
                    ("<-" . ?←)
                    ("->" . ?→)
                    ("<=" . ?⇐)
                    ("=>" . ?⇒))
                  base-prettify-symbols-alist)))

  ;; Hook 'em up.
  (add-hook 'emacs-lisp-mode-hook 'my-lisp-prettify-symbols-hook)
  (add-hook 'web-mode-hook 'my-prettify-symbols-hook)
  (add-hook 'js-mode-hook 'my-js-prettify-symbols-hook)
  (add-hook 'python-mode-hook 'my-python-prettify-symbols-hook)
  (add-hook 'prog-mode-hook 'my-prettify-symbols-hook)
#+END_SRC
*** ido - Interactively do things
    I don't use this because I prefer swiper:
*** rainbow-delimiters - parenthesis change color depending on depth
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :defer t
    :init (add-hook 'prog-mode-hook 'rainbow-delimiters-mode))
#+END_SRC
*** rainbox-blocks - understand Clojure/Lisp code at a glance using block highlighting.
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-blocks
    :defer t
    :init (add-hook 'clojure-mode-hook 'rainbow-blocks-mode))
#+END_SRC

*** highlight-symbol
    Quickly highlight a symbol throughout the buffer and cycle through its locations.
#+BEGIN_SRC emacs-lisp
(use-package highlight-symbol
  :config
  (add-hook 'prog-mode-hook 'highlight-symbol-mode)
  (set-face-background 'highlight-symbol-face "#a45bad")
  (setq highlight-symbol-idle-delay 0.5)
  :bind (("M-n" . highlight-symbol-next)
         ("M-p" . highlight-symbol-prev)))
#+END_SRC
*** Better interaction with X clipboard
#+BEGIN_SRC emacs-lisp
(setq-default
  ;; Makes killing/yanking interact with the clipboard.
  x-select-enable-clipboard t

  ;; To understand why this is done, read `X11 Copy & Paste to/from Emacs' section here:
  ;; https://www.emacswiki.org/emacs/CopyAndPaste.
  x-select-enable-primary t

  ;; Save clipboard strings into kill ring before replacing them. When
  ;; one selects something in another program to paste it into Emacs, but
  ;; kills something in Emacs before actually pasting it, this selection
  ;; is gone unless this variable is non-nil.
  save-interprogram-paste-before-kill t

  ;; Shows all options when running apropos. For more info,
  ;; https://www.gnu.org/software/emacs/manual/html_node/emacs/Apropos.html.
  apropos-do-all t

  ;; Mouse yank commands yank at point instead of at click.
  mouse-yank-at-point t)
#+END_SRC
*** Parenthesis
#+BEGIN_SRC emacs-lisp
  ;; Automatic parenthesis
  (use-package smartparens
    :diminish
    smartparens-mode
    :commands
    smartparens-strict-mode
    smartparens-mode
    sp-restrict-to-pairs-interactive
    sp-local-pair
    :config
    (require 'smartparens-config)
    (sp-use-smartparens-bindings)
    (sp-pair "(" ")" :wrap "C-(")
    (sp-pair "[" "]" :wrap "s-[")
    (sp-pair "{" "}" :wrap "C-{")
    (bind-key "s-<backspace>" 'sp-backward-kill-sexp smartparens-mode-map)
    (bind-key "s-<delete>" 'sp-kill-sexp smartparens-mode-map)
    (bind-key "s-<backspace>" 'sp-backward-kill-sexp smartparens-mode-map)
    (bind-key "s-<home>" 'sp-beginning-of-sexp smartparens-mode-map)
    (bind-key "s-<end>" 'sp-end-of-sexp smartparens-mode-map)
    (bind-key "s-<up>" 'sp-beginning-of-previous-sexp smartparens-mode-map)
    (bind-key "s-<down>" 'sp-next-sexp smartparens-mode-map)
    (bind-key "s-<left>" 'sp-backward-up-sexp smartparens-mode-map)
    (bind-key "s-<right>" 'sp-down-sexp smartparens-mode-map)
    :bind
    ("C-x j" . smartparens-mode))
#+END_SRC

*** OpenWith
##+BEGIN_SRC emacs-lisp
  (when (require 'openwith nil 'noerror)
    (setq openwith-associations
          (list
           (list (openwith-make-extension-regexp
                  '("mpg" "mpeg" "mp3" "mp4"
                    "avi" "wmv" "wav" "mov" "flv"
                    "ogm" "ogg" "mkv"))
                 "vlc"
                 '(file))
           (list (openwith-make-extension-regexp
                  '("xbm" "pbm" "pgm" "ppm" "pnm"
                    "png" "gif" "bmp" "tif" "jpeg" "jpg"))
                 "xee"
                 '(file))
           (list (openwith-make-extension-regexp
                  '("doc" "xls" "ppt" "odt" "ods" "odg" "odp"))
                 "libreoffice"
                 '(file))
           (list (openwith-make-extension-regexp
                  '("html"))
                 "firefox"
                 '(file))

           '("\\.lyx" "lyx" (file))
           '("\\.chm" "kchmviewer" (file))
           (list (openwith-make-extension-regexp
                  '("pdf" "ps" "ps.gz" "dvi"))
                 "emacs"
                 '(file))))

    (openwith-mode 1))
##+END_SRC
* Theming
*** material-theme
#+BEGIN_SRC emacs-lisp
  (use-package material-theme
    :config (load-theme 'material t))
#+END_SRC
*** doom-themes
##+BEGIN_SRC emacs-lisp
  (use-package doom-themes
    :config
    (load-theme 'doom-vibrant t))
##+END_SRC
*** spacemacs-theme
##+BEGIN_SRC emacs-lisp
  (use-package ewal-spacemacs-themes
    :config
    (setq spacemacs-theme-comment-bg nil
          spacemacs-theme-comment-italic t)
    (load-theme 'spacemacs-dark t))
##+END_SRC
* General
*** uniquify
uniquify overrides Emacs’ default mechanism for making buffer names unique (using suffixes like <2>, <3> etc.)
with a more sensible behaviour which use parts of the file names to make the buffer names distinguishable.

For instance, buffers visiting “/u/mernst/tmp/Makefile" and "/usr/projects/zaphod/Makefile” would be named
“Makefile|tmp” and “Makefile|zaphod”, respectively (instead of “Makefile” and “Makefile<2>”).
Other buffer name styles are also available.

uniquify is distributed with GnuEmacs.
#+BEGIN_SRC emacs-lisp
  (use-package uniquify-files)
#+END_SRC
*** recentf
Recentf is a minor mode that builds a list of recently opened files. This list is is automatically saved
across sessions on exiting Emacs - you can then access this list through a command or the menu.
#+BEGIN_SRC emacs-lisp
  (use-package recentf
    :config
    (setq recentf-max-saved-items 25
          recentf-max-menu-items 25
          recentf-save-file (concat user-emacs-directory ".recentf"))
    (recentf-mode t)
    :init
    (global-set-key (kbd "C-x C-r") 'recentf-open-files)
    )
#+END_SRC
*** Which Key
    Prompt the next possible key bindings after a short wait.
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :config
    (which-key-mode t)
    :diminish nil)
#+END_SRC
*** esup
    Emacs Start Up Profiler (esup) benchmarks Emacs startup time without leaving Emacs.
    https://github.com/jschaf/esup
#+BEGIN_SRC emacs-lisp
  (use-package esup)
#+END_SRC
*** Dashboard
    https://github.com/emacs-dashboard/emacs-dashboard
#+BEGIN_SRC emacs-lisp
  (use-package dashboard
    :config
    (dashboard-setup-startup-hook)
    :init
    (setq dashboard-banner-logo-title "Welcome to Emacs Dashboard")
    ;; Set the banner
    (setq dashboard-startup-banner 'logo)
    ;; Value can be
    ;; 'official which displays the official emacs logo
    ;; 'logo which displays an alternative emacs logo
    ;; 1, 2 or 3 which displays one of the text banners
    ;; "path/to/your/image.png" which displays whatever image you would prefer

    ;; Content is not centered by default. To center, set
    (setq dashboard-center-content t)

    ;; To disable shortcut "jump" indicators for each section, set
    ;;(setq dashboard-show-shortcuts nil)
    )
#+END_SRC
*** Tramp
TRAMP is a package providing an abstraction layer that can be used for accessing remote files on different machines.
I say "abstraction layer" because it's not just a simple library for reading and writing files,
it hooks into Emacs at a low enough level that other packages need not be aware of it in order to use it.

TRAMP stands for Transparent Remote (file) Access, Multiple Protocol
#+BEGIN_SRC emacs-lisp
  (use-package tramp
    :defer 5
    :config
    (with-eval-after-load 'tramp-cache
      (setq tramp-persistency-file-name "~/.emacs.d/tramp"))
    (setq
      tramp-default-user-alist '(("\\`su\\(do\\)?\\'" nil "root"))
      tramp-adb-program "adb"
      ;; Default connection method for TRAMP - remote files plugin
      tramp-default-method "ssh"
      ;; use the settings in ~/.ssh/config instead of Tramp's
      tramp-use-ssh-controlmaster-options nil
      ;; don't generate backups for remote files opened as root (security hazzard)
      backup-enable-predicate
      (lambda (name)
        (and (normal-backup-enable-predicate name)
            (not (let ((method (file-remote-p name 'method)))
                  (when (stringp method)
                    (member method '("su" "sudo")))))))))
#+END_SRC
*** Paradox Package Manager
    https://github.com/Malabarba/paradox
#+BEGIN_SRC emacs-lisp
  (use-package paradox
    :config
    (setq paradox-execute-asynchronously t)
    (setq paradox-automatically-star t)
    (paradox-enable))
#+END_SRC
*** hideshow
#+BEGIN_SRC emacs-lisp
(use-package hideshow
  :hook ((prog-mode . hs-minor-mode)))

(defun toggle-fold ()
  (interactive)
  (save-excursion
    (end-of-line)
    (hs-toggle-hiding)))
#+END_SRC
*** Ivy, Counsel, Swiper and Avy
    https://github.com/abo-abo/swiper
    Ivy, a generic completion mechanism for Emacs.
    Counsel, a collection of Ivy-enhanced versions of common Emacs commands.
    Swiper, an Ivy-enhanced alternative to isearch.
#+BEGIN_SRC emacs-lisp
  (use-package ivy)

  (use-package swiper
    :diminish ivy-mode
    :bind
    (("C-r" . swiper)
     ("C-c C-r" . ivy-resume)
     ("C-c h m" . woman)
     ("C-x b" . ivy-switch-buffer)
     ("C-c u" . swiper-all))
    :config
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t))

  (use-package counsel
    :commands (counsel-mode)
    :bind
    (("C-s" . counsel-grep-or-swiper)
     ("M-x" . counsel-M-x)
     ("C-x C-f" . counsel-find-file)
     ("C-h f" . counsel-describe-function)
     ("C-h v" . counsel-describe-variable)
     ("C-h i" . counsel-info-lookup-symbol)
     ("C-h l" . counsel-find-library)
     ("C-h u" . counsel-unicode-char)
     ("C-c k" . counsel-ag)
     ("C-x l" . counsel-locate)
     ("C-c g" . counsel-git)
     ("C-c j" . counsel-git-grep)
     ("C-c h i" . counsel-imenu)
     ("C-S-o" . 'counsel-rhythmbox)
     ("C-x p" . counsel-list-processes))
    :init (counsel-mode 1)
    :config
    ;; set action options during execution of counsel-find-file
    ;; replace "frame" with window to open in new window
    (ivy-set-actions
     'counsel-find-file
     '(
       ("j" find-file-other-window "other")
       ("b" counsel-find-file-cd-bookmark-action "cd bookmark")
       ("x" counsel-find-file-extern "open externally")
       ("d" delete-file "delete")
       ("r" counsel-find-file-as-root "open as root") ))

    ;; set actions when running C-x b
    ;; replace "frame" with window to open in new window
    (ivy-set-actions
     'ivy-switch-buffer
     '(
       ("j" switch-to-buffer-other-frame "other frame")
       ("k" kill-buffer "kill")
       ("r" ivy--rename-buffer-action "rename")))

    (ivy-set-actions
     'counsel-git-grep
     '(
       ("j" find-file-other-window "other") )))

  (use-package avy
    :config
    (avy-setup-default)
    :bind ("M-s" . avy-goto-char))

  (use-package ivy-hydra)
  (use-package ivy-xref
    :init (setq xref-show-xrefs-function #'ivy-xref-show-xrefs))

  (use-package ivy-posframe
    :after ivy
    :diminish
    :config
    (setq ivy-posframe-display-functions-alist '((t . ivy-posframe-display-at-frame-top-center))
          ivy-posframe-height-alist '((t . 20))
          ivy-posframe-parameters '((internal-border-width . 10)))
    (setq ivy-posframe-width 70)
    (ivy-posframe-mode +1))

  (use-package ivy-rich
    :preface
    (defun ivy-rich-switch-buffer-icon (candidate)
      (with-current-buffer
          (get-buffer candidate)
        (all-the-icons-icon-for-mode major-mode)))
    :init
    (setq ivy-rich-display-transformers-list ; max column width sum = (ivy-poframe-width - 1)
          '(ivy-switch-buffer
            (:columns
             ((ivy-rich-switch-buffer-icon (:width 2))
              (ivy-rich-candidate (:width 35))
              (ivy-rich-switch-buffer-project (:width 15 :face success))
              (ivy-rich-switch-buffer-major-mode (:width 13 :face warning)))
             :predicate
             #'(lambda (cand) (get-buffer cand)))
            counsel-M-x
            (:columns
             ((counsel-M-x-transformer (:width 35))
              (ivy-rich-counsel-function-docstring (:width 34 :face font-lock-doc-face))))
            counsel-describe-function
            (:columns
             ((counsel-describe-function-transformer (:width 35))
              (ivy-rich-counsel-function-docstring (:width 34 :face font-lock-doc-face))))
            counsel-describe-variable
            (:columns
             ((counsel-describe-variable-transformer (:width 35))
              (ivy-rich-counsel-variable-docstring (:width 34 :face font-lock-doc-face))))
            package-install
            (:columns
             ((ivy-rich-candidate (:width 25))
              (ivy-rich-package-version (:width 12 :face font-lock-comment-face))
              (ivy-rich-package-archive-summary (:width 7 :face font-lock-builtin-face))
              (ivy-rich-package-install-summary (:width 23 :face font-lock-doc-face))))))
    :config
    (ivy-rich-mode +1)
    (setcdr (assq t ivy-format-functions-alist) #'ivy-format-function-line))
#+END_SRC
*** Company - a text completion framework for Emacs. The name stands for "complete anything"
    http://company-mode.github.io
#+BEGIN_SRC emacs-lisp
(use-package company
  :diminish company-mode
  :defer 2
  :bind ("C-<tab>" . company-complete)
  :config (global-company-mode t))
#+END_SRC
*** Projectile - easy project management and navigation
    https://github.com/bbatsov/projectile

    The concept of a project is pretty basic - just a folder containing special file.
    Currently git, mercurial, darcs and bazaar repos are considered projects by default.
    So are lein, maven, sbt, scons, rebar and bundler projects.
    If you want to mark a folder manually as a project just create an empty .projectile file in it.
    Some of Projectile's features:

    jump to a file in project
    jump to files at point in project
    jump to a directory in project
    jump to a file in a directory
    jump to a project buffer
    jump to a test in project
    toggle between files with same names but different extensions (e.g. .h <-> .c/.cpp, Gemfile <-> Gemfile.lock)
    toggle between code and its test (e.g. main.service.js <-> main.service.spec.js)
    jump to recently visited files in the project
    switch between projects you have worked on
    kill all project buffers
    replace in project
    multi-occur in project buffers
    grep in project
    regenerate project etags or gtags (requires ggtags).
    visit project in dired
    run make in a project with a single key chord
    check for dirty repositories
    toggle read-only mode for the entire project
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :commands (projectile-mode)
    :demand
    :init
    (setq projectile-use-git-grep t)
    (setq projectile-require-project-root nil)
    (setq projectile-completion-system 'ivy)
    (setq projectile-sort-order 'recentf)
    (setq projectile-indexing-method 'hybrid)
    :bind
    (("s-f" . projectile-find-file)
     ("s-F" . projectile-grep)))

  (use-package counsel-projectile
    :commands (counsel-projectile-mode)
    :init
    (projectile-mode +1)
    (counsel-projectile-mode))
#+END_SRC
*** Markdown
#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
    :commands (markdown-mode gfm-mode)
    :mode
    (("README\\.md\\'" . gfm-mode)
     ("\\.md\\'"       . markdown-mode)
     ("\\.markdown\\'" . markdown-mode))
    :init
    (if (eq system-type 'usg-unix-v)
        (setq markdown-command "markdown_py")
      (setq markdown-command "multimarkdown"))
    :bind
    (("<f9>" . markdown-preview)))
#+END_SRC
*** conf-mode - UNIX config files
#+BEGIN_SRC emacs-lisp
(use-package conf-mode)
#+END_SRC
* Development
*** General Packages
    highlight-indent-guides highlights indentation levels via font-lock.
    https://github.com/DarthFennec/highlight-indent-guides

    highlight-symbol: automatic and manual symbol highlighting for Emacs.
    https://github.com/nschum/highlight-symbol.el

    highlight-numbers is an Emacs minor mode that highlights numeric literals in source code.
    https://github.com/Fanael/highlight-numbers

    Highlight escape sequences in Emacs
    https://github.com/dgutov/highlight-escape-sequences
#+BEGIN_SRC emacs-lisp
  (use-package highlight-indent-guides
    :hook (prog-mode . highlight-indent-guides-mode)
    :diminish
    :config
    (setq highlight-indent-guides-method 'character)
    (setq highlight-indent-guides-character 9615) ; left-align vertical bar
    (setq highlight-indent-guides-auto-character-face-perc 20))

  (use-package highlight-symbol
    :diminish
    :hook (prog-mode . highlight-symbol-mode)
    :config (setq highlight-symbol-idle-delay 0.3))

  (use-package highlight-numbers
    :hook (prog-mode . highlight-numbers-mode))

  (use-package highlight-operators
    :hook (prog-mode . highlight-operators-mode))

  (use-package highlight-escape-sequences
    :hook (prog-mode . hes-mode))
#+END_SRC
*** flycheck - syntax checker
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :init
    (progn
      (define-fringe-bitmap 'my-flycheck-fringe-indicator
        (vector #b00000000
                #b00000000
                #b00000000
                #b00000000
                #b00000000
                #b00000000
                #b00000000
                #b00011100
                #b00111110
                #b00111110
                #b00111110
                #b00011100
                #b00000000
                #b00000000
                #b00000000
                #b00000000
                #b00000000))

      (flycheck-define-error-level 'error
        :severity 2
        :overlay-category 'flycheck-error-overlay
        :fringe-bitmap 'my-flycheck-fringe-indicator
        :fringe-face 'flycheck-fringe-error)

      (flycheck-define-error-level 'warning
        :severity 1
        :overlay-category 'flycheck-warning-overlay
        :fringe-bitmap 'my-flycheck-fringe-indicator
        :fringe-face 'flycheck-fringe-warning)

      (flycheck-define-error-level 'info
        :severity 0
        :overlay-category 'flycheck-info-overlay
        :fringe-bitmap 'my-flycheck-fringe-indicator
        :fringe-face 'flycheck-fringe-info)))
#+END_SRC
*** magit, forge (formerly magithub) and diff-hl
    https://magit.vc/
    https://github.com/magit/forge
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :bind ("C-x g" . magit-status))

  (use-package forge
    :after magit)

  ;; Emacs package for highlighting uncommitted changes
  (use-package diff-hl
    :custom-face
    (diff-hl-insert ((t (:foreground "#55bb55" :background nil))))
    (diff-hl-delete ((t (:foreground "#ff6666" :background nil))))
    (diff-hl-change ((t (:foreground "#99bbdd" :background nil))))
    :config
    (global-diff-hl-mode +1)
    (diff-hl-flydiff-mode +1)
    (add-hook 'magit-post-refresh-hook #'diff-hl-magit-post-refresh t))
#+END_SRC
*** git-gutter and git-timemachine
    git-gutter: Shows modified lines.  https://github.com/syohex/emacs-git-gutter
    git-timemachine: Go through git history in a file.  https://github.com/emacsmirror/git-timemachine
#+BEGIN_SRC emacs-lisp
  (use-package git-gutter
    :config
    (global-git-gutter-mode t)
    (setq git-gutter:modified-sign "|")
    (set-face-foreground 'git-gutter:modified "grey")
    (set-face-foreground 'git-gutter:added "green")
    (set-face-foreground 'git-gutter:deleted "red")
    :bind (("C-x C-g" . git-gutter))
    :diminish nil)

  (use-package git-timemachine)
#+END_SRC
*** cmake-mode
#+BEGIN_SRC emacs-lisp
  (use-package cmake-mode
    :mode "CMakeLists\\.txt\\'")
#+END_SRC
*** yaml-mode
#+BEGIN_SRC emacs-lisp
  (use-package yaml-mode
    :mode "\\.ya?ml$")
#+END_SRC
*** elisp-format - EMACS Lisp files
##+BEGIN_SRC emacs-lisp
  (use-package elisp-format)
##+END_SRC
*** Parinfer
    https://github.com/shaunlebron/parinfer
    parinfer-extensions:
| Extension     | Function                                                                          |
|---------------+-----------------------------------------------------------------------------------|
| defaults      | Should be enabled, basic compatibility                                            |
| pretty-parens | Use dim style for Indent Mode, rainbow delimiters for Paren Mode                  |
| smart-yank    | Yank will preserve indentation in Indent Mode, will preserve parens in Paren Mode |
| smart-tab     | C-f & C-b on empty line will goto next/previous import indentation.               |
| paredit       | Introduce some paredit commands from paredit-mode.                                |
| lispy         | Integration with Lispy.                                                           |
| evil          | Integration with Evil.                                                            |
| one           | Experimental on fuzz Indent Mode and Paren Mode. Not recommanded.                 |

auto switch to Indent Mode whenever parens are balance in Paren Mode
#+BEGIN_SRC emacs-lisp
  (use-package parinfer
    :ensure
    :bind
    ("C-," . parinfer-toggle-mode)
    :init
    (progn
      (setq parinfer-extensions
            '(defaults       ; should be included.
               paredit        ; Introduce some paredit commands.
               smart-tab      ; C-b & C-f jump positions and smart shift with tab & S-tab.
               smart-yank))   ; Yank behavior depend on mode.
      (add-hook 'clojure-mode-hook #'parinfer-mode)
      (add-hook 'emacs-lisp-mode-hook #'parinfer-mode)
      (add-hook 'common-lisp-mode-hook #'parinfer-mode)
      (add-hook 'scheme-mode-hook #'parinfer-mode)
      (add-hook 'lisp-mode-hook #'parinfer-mode)))

  (use-package paredit
    :bind ("M-^" . paredit-delete-indentation)
    :bind ("C-^" . paredit-remove-newlines)
    :init
    (add-hook 'clojure-mode-hook 'paredit-mode)
    (add-hook 'emacs-lisp-mode-hook       'paredit-mode)
    (add-hook 'eval-expression-minibuffer-setup-hook 'paredit-mode)
    (add-hook 'ielm-mode-hook             'paredit-mode)
    (add-hook 'lisp-mode-hook             'paredit-mode)
    (add-hook 'lisp-interaction-mode-hook 'paredit-mode)
    (add-hook 'scheme-mode-hook           'paredit-mode))
#+END_SRC
*** SLIME - superior Lisp Interaction Mode for Emacs
    https://github.com/slime/slime
#+BEGIN_SRC emacs-lisp
  (use-package slime
    :init
    ;; Set your lisp system and, optionally, some contribs
    (setq inferior-lisp-program "/usr/bin/sbcl")
    (setq slime-contribs '(slime-fancy)))
#+END_SRC
*** docker
#+BEGIN_SRC emacs-lisp
  (use-package docker
    :commands docker-mode
    :bind ("C-c d" . docker))

  (use-package dockerfile-mode
    :mode "Dockerfile.*\\'")
#+END_SRC
*** Prolog
#+BEGIN_SRC emacs-lisp
  (use-package prolog
      :load-path "~/code/emacs/prolog"
      :mode ("\\.pl\\'" . prolog-mode)
      :config
      (setq-default prolog-system 'swi)
      (setq prolog-system 'swi))
#+END_SRC
*** Python packages
    elpy - Emacs Python Development Environment (https://github.com/jorgenschaefer/elpy)
    jedi - Python auto-completion for Emacs (https://github.com/tkf/emacs-jedi)
#+BEGIN_SRC emacs-lisp
  (use-package jedi
    :init
    (add-hook 'python-mode-hook 'jedi:setup)
    (add-hook 'python-mode-hook 'jedi:ac-setup))

  (use-package elpy
    :defer 2
    :config
    ;; Use Flycheck instead of Flymake
    (when (require 'flycheck nil t)
      (remove-hook 'elpy-modules 'elpy-module-flymake)
      (remove-hook 'elpy-modules 'elpy-module-yasnippet)
      (remove-hook 'elpy-mode-hook 'elpy-module-highlight-indentation)
      (add-hook 'elpy-mode-hook 'flycheck-mode))
    (elpy-enable)
    (setq elpy-rpc-backend "jedi")
    (unless (string-equal system-type "usg-unix-v") ; UNIX System V (OpenIndiana) doesn't have Jupyter
      (progn
        (setq python-shell-interpreter "jupyter"
              python-shell-interpreter-args "console --simple-prompt"
              python-shell-prompt-detect-failure-warning nil)
        (add-to-list 'python-shell-completion-native-disabled-interpreters "jupyter"))))

  (use-package py-autopep8
    :init (add-hook 'elpy-mode-hook 'py-autopep8-enable-on-save))

  (use-package yasnippet
    :init (yas-global-mode 1))
  (use-package yasnippet-snippets)
#+END_SRC
*** LSP
#+BEGIN_SRC emacs-lisp
  (use-package lsp-mode
    :hook ((c-mode         ; clangd
            c-or-c++-mode  ; clangd
            java-mode      ; eclipse-jdtls
            js-mode        ; typescript-language-server
            python-mode    ; pyls
            dart-mode      ; dart analysis server
            ) . lsp)
    :commands lsp
    :config
    (setq lsp-prefer-flymake nil)
    (setq lsp-enable-symbol-highlighting nil)
    (setq lsp-signature-auto-activate nil))

  (use-package lsp-java
    :after lsp)

  (use-package company-lsp
    :commands company-lsp
    :config (setq company-lsp-cache-candidates 'auto))
#+END_SRC
* Web
#+BEGIN_SRC emacs-lisp
  (use-package web-mode
    :mode "\\.phtml\\'"
    :mode "\\.volt\\'"
    :mode "\\.html\\'"
    :mode "\\.tsx$\\'"
    :init
    (add-hook 'web-mode-hook 'variable-pitch-mode)
    (add-hook 'web-mode-hook 'company-mode)
    (add-hook 'web-mode-hook 'prettier-js-mode)
    (add-hook 'web-mode-hook (lambda () (pcase (file-name-extension buffer-file-name)
                        ("tsx" (my-tide-setup-hook))
                        (_ (my-web-mode-hook))))))

  (use-package css-mode
    :init
    (add-to-list 'auto-mode-alist '("\\.scss$" . css-mode))
    (add-to-list 'auto-mode-alist '("\\.sass$" . css-mode))
    (setq css-indent-offset 2))

  ;; Emmet is super cool, and emmet-mode brings support to Emacs.
  (use-package emmet-mode
    :commands (emmet-expand-line emmet-expand)
    :defer 2
    :init
    (add-hook 'sgml-mode-hook 'emmet-mode)
    (add-hook 'web-mode-hook 'emmet-mode)
    (add-hook 'css-mode-hook  'emmet-mode)
    :config
    (bind-key "C-j" 'emmet-expand-line emmet-mode-keymap)
    (bind-key "<C-return>" 'emmet-expand emmet-mode-keymap)
    (setq emmet-indentation 2)
    (defadvice emmet-preview-accept (after expand-and-fontify activate)
      "Update the font-face after an emmet expantion."
      (font-lock-fontify-buffer)))

  (use-package nginx-mode
    :mode "\\.nginx\\'")
#+END_SRC
* JavaScript
  For indium (https://github.com/NicolasPetton/Indium) remember to install the indium server:
  sudo npm install -g indium
#+BEGIN_SRC emacs-lisp
  (use-package js2-mode
    :mode ("\\.js\\'")
    :interpreter "node")

  (use-package angular-mode
    :config (setq js-indent-level 4))

  (defun eslint-fix-file ()
    (interactive)
    (add-node-modules-path)
    (message (concat "eslint --fix " (buffer-file-name)))
    (call-process "eslint" nil 0 nil "--fix" (buffer-file-name))
    (revert-buffer t t))

  (defun my-web-mode-hook ())
  (defun my-tide-setup-hook ()
    (tide-setup)
    (eldoc-mode)
    (tide-hl-identifier-mode +1)

    (setq web-mode-enable-auto-quoting nil)
    (setq web-mode-markup-indent-offset 4)
    (setq web-mode-code-indent-offset 4)
    (setq web-mode-attr-indent-offset 4)
    (setq web-mode-attr-value-indent-offset 4)
    (set (make-local-variable 'company-backends)
          '((company-tide company-files :with company-yasnippet)
            (company-dabbrev-code company-dabbrev)))
    (flycheck-add-mode 'typescript-tslint 'web-mode)
    (general-define-key
      :states 'normal
      :keymaps 'local
      :prefix ", ."
      "f" 'tide-fix
      "i" 'tide-organize-imports
      "u" 'tide-references
      "R" 'tide-restart-server
      "d" 'tide-documentation-at-point
      "F" 'tide-format

      "e s" 'tide-error-at-point
      "e l" 'tide-project-errors
      "e i" 'tide-add-tslint-disable-next-line
      "e n" 'tide-find-next-error
      "e p" 'tide-find-previous-error

      "r r" 'tide-rename-symbol
      "r F" 'tide-refactor
      "r f" 'tide-rename-file)
    (general-define-key
      :states 'normal
      :keymaps 'local
      :prefix "g"
      :override t

      "d" 'tide-jump-to-definition
      "D" 'tide-jump-to-implementation
      "b" 'tide-jump-back))

  (use-package prettier-js
    :defer t)
  (use-package tide
    :defer t)

  (use-package typescript-mode
    :mode (("\\.ts$" . typescript-mode))
    :init
    (add-hook 'typescript-mode-hook 'my-tide-setup-hook)
    (add-hook 'typescript-mode-hook 'company-mode)
    (add-hook 'typescript-mode-hook 'prettier-js-mode))

  (setq-default typescript-indent-level 4)

  (use-package indium)
#+END_SRC
* mu4e
##+BEGIN_SRC emacs-lisp
(use-package mu4e
;;  :load-path "/usr/share/emacs/site-lisp/mu4e"
    :commands mu4e
    :config
      (use-package mu4e-contrib)
      (if mail-on
        (progn
          (setq mu4e-html2text-command 'mu4e-shr2text)
          (setq mu4e-context-policy 'pick-first)
          (setq mu4e-completing-read-function 'ivy-completing-read)
          (setq message-send-mail-function 'smtpmail-send-it)
          (setq mu4e-view-html-plaintext-ratio-heuristic 50)
          (setq mu4e-contexts
            (list ((make-mu4e-context
                    :name "gmx"
                    :enter-func (lambda () (mu4e-message "Switch to the gmx context"))
                    :match-func (lambda (msg)
                          (when msg
                            (s-prefix? "/gmx" (mu4e-message-field msg :maildir))))
                    :vars '((user-mail-address . "a.wacknitz@gmx.de")
                            (mu4e-sent-folder . "/gmx/sent")
                            (mu4e-drafts-folder . "/gmx/drafts")
                            (mu4e-trash-folder . "/gmx/trash")
                            (mu4e-sent-messages-behavior . delete)
                            (smtpmail-default-smtp-server . "smtp.gmx.net")
                            (smtpmail-smtp-server . "smtp.gmx.net")
                            (smtpmail-stream-type . starttls)
                            (smtpmail-smtp-service . 587)))
                    (make-mu4e-context
                        :name "web.de"
                        :enter-func (lambda () (mu4e-message "Switch to web.de context"))
                        :match-func (lambda (msg)
                            (when
                              msg (mu4e-message-contact-field-matches
                              msg :to "lurge@web.de")))
                        :vars '((user-mail-address . "lurge@web.de")
                                (mu4e-sent-folder . "/web/sent")
                                (mu4e-drafts-folder . "/web/drafts")
                                (mu4e-sent-messages-behavior . sent)
                                (smtpmail-default-smtp-server . "smtp.web.de")
                                (smtpmail-smtp-server . "smtp.web.de")
                                (smtpmail-stream-type . starttls)
                                (smtpmail-smtp-service . 587)))))
            (setq mu4e-maildir "~/mail")
            (setq mu4e-get-mail-command "mbsync -a")
            (setq mu4e-update-interval 300)
            (setq mu4e-view-show-addresses t)
            (setq mu4e-headers-include-related t)
            (setq mu4e-headers-show-threads nil)
            (setq mu4e-headers-skip-duplicates t)
            (setq mu4e-split-view 'vertical)
            (setq
                user-full-name  "Andreas Wacknitz"
                mu4e-compose-signature ""
                mu4e-compose-signature-auto-include nil
                mu4e-attachment-dir "~/Downloads")
            (setq mu4e-maildir-shortcuts
                '(("/gmx/inbox"     . ?g)
                  ("/webde/inbox"       . ?w)
                  ("/purelyfunctional/inbox" . ?p)))

            (setq mu4e-bookmarks '(("flag:unread AND NOT flag:trashed AND NOT maildir:/gmail/spam AND NOT maildir:/purelyfunctional/haskell AND NOT maildir:/purelyfunctional/github"
                  "Unread messages"     ?u)
                  ("date:today..now"                  "Today's messages"     ?t)
                  ("date:7d..now"                     "Last 7 days"          ?w)
                  ("mime:image/*"                     "Messages with images" ?p)
                  ("maildir:/purelyfunctional/haskell" "haskell" ?h)))

            (add-hook 'mu4e-compose-mode-hook 'mml-secure-message-sign)
            (add-hook 'mu4e-view-mode-hook '(lambda ()
                (local-set-key (kbd "<end>") 'end-of-line)
                (local-set-key (kbd "<home>") 'beginning-of-line)))
            (when (fboundp 'imagemagick-register-types)
                (imagemagick-register-types))
            (add-to-list 'mu4e-view-actions
                '("View in browser" . mu4e-action-view-in-browser) t)

            ;; don't keep message buffers around
            (setq message-kill-buffer-on-exit t))))
##+END_SRC
* org - markdown on steroids
#+BEGIN_SRC emacs-lisp
  (use-package org
    :mode ("\\.org\\'" . org-mode)
    :bind
    ("C-c l" . org-store-link)
    ("C-c a" . org-agenda)
    ("C-c c" . org-capture)
    ("C-c b" . org-switchb)
    :config
    (setq org-directory "~/org")
    (setq org-support-shift-select t))

  (eval-after-load "org"
    '(require 'ox-md nil t))  ;; Provide markdown export

  (use-package org-bullets
    :commands (org-bullets-mode)
    :init (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))

  (use-package ob-typescript)

  (org-babel-do-load-languages
   'org-babel-load-languages
   '((plantuml . t)
     (typescript . t)))

  (setq org-plantuml-jar-path (expand-file-name "~/bin/plantuml.jar"))

  (use-package org-ql)

  (use-package htmlize)
#+END_SRC
* PDF Tools
#+BEGIN_SRC emacs-lisp
  (use-package pdf-tools
    :magic ("%PDF" . pdf-view-mode)
    :config
    (pdf-tools-install)
    ;; open pdfs scaled to fit page
    (setq-default pdf-view-display-size 'fit-page)
    ;; automatically annotate highlights
    (setq pdf-annot-activate-created-annotations t)
    ;; turn off cua so copy works
    (add-hook 'pdf-view-mode-hook (lambda () (cua-mode 0)))
    ;; more fine-grained zooming
    (setq pdf-view-resize-factor 1.1)
    ;; keyboard shortcuts
    (define-key pdf-view-mode-map (kbd "h") 'pdf-annot-add-highlight-markup-annotation)
    (define-key pdf-view-mode-map (kbd "t") 'pdf-annot-add-text-annotation)
    (define-key pdf-view-mode-map (kbd "D") 'pdf-annot-delete)
    ;; use normal isearch
    (define-key pdf-view-mode-map (kbd "C-s") 'isearch-forward))
#+END_SRC
* LaTeX
#+BEGIN_SRC emacs-lisp
  (use-package tex-site
    :ensure auctex
    :mode ("\\.tex\\'" . latex-mode)
    :config
    (setq-default TeX-master nil)
    (add-hook 'LaTeX-mode-hook
              (lambda ()
                (rainbow-delimiters-mode)
                (company-mode)
                (smartparens-mode)
                (turn-on-reftex)))
    ;; Update PDF buffers after successful LaTeX runs
    (add-hook 'TeX-after-TeX-LaTeX-command-finished-hook #'TeX-revert-document-buffer)
    ;; to use pdfview with auctex
    (add-hook 'LaTeX-mode-hook 'pdf-tools-install))
#+END_SRC
* OS dependent settings and packages
  https://github.com/Alexander-Miller/treemacs
  https://github.com/emacs-lsp/lsp-treemacs
  https://github.com/jaypei/emacs-neotree
#+BEGIN_SRC emacs-lisp
    (defun xah-open-in-external-app (&optional @fname)
      "Open the current file or dired marked files in external app.
    The app is chosen from your OS's preference.

    When called in emacs lisp, if @fname is given, open that.

    URL `http://ergoemacs.org/emacs/emacs_dired_open_file_in_ext_apps.html'
    Version 2019-11-04"
      (interactive)
      (let* (
             ($file-list
              (if @fname
                  (progn (list @fname))
                (if (string-equal major-mode "dired-mode")
                    (dired-get-marked-files)
                  (list (buffer-file-name)))))
             ($do-it-p (if (<= (length $file-list) 5)
                           t
                         (y-or-n-p "Open more than 5 files? "))))
        (when $do-it-p
          (cond
           ((string-equal system-type "windows-nt")
            (mapc
             (lambda ($fpath)
               (w32-shell-execute "open" $fpath)) $file-list))
           ((string-equal system-type "darwin")
            (mapc
             (lambda ($fpath)
               (shell-command
                (concat "open " (shell-quote-argument $fpath))))  $file-list))
           ((string-equal system-type "usg-unix-v")
            (mapc
             (lambda ($fpath) (let ((process-connection-type nil))
                                (start-process "" nil "xdg-open" $fpath))) $file-list))
           ((string-equal system-type "gnu/linux")
            (mapc
             (lambda ($fpath) (let ((process-connection-type nil))
                                (start-process "" nil "xdg-open" $fpath))) $file-list))))))


    (defun load-treemacs ()
      (use-package treemacs
        :defer t
        :init
        (with-eval-after-load 'winum
          (define-key winum-keymap (kbd "M-´") #'treemacs-select-window))
        :config
        (progn
          (setq
           treemacs-collapse-dirs (if (executable-find "python") 3 0)
           treemacs-deferred-git-apply-delay   0.5
           treemacs-display-in-side-window     t
           treemacs-file-event-delay           5000
           treemacs-file-follow-delay          0.2
           treemacs-follow-after-init          t
           treemacs-recenter-distance          0.1
           treemacs-git-command-pipe           ""
           treemacs-goto-tag-strategy          'refetch-index
           treemacs-indentation                2
           treemacs-indentation-string         " "
           treemacs-is-never-other-window      nil
           treemacs-max-git-entries            5000
           treemacs-no-png-images              nil
           treemacs-no-delete-other-windows    t
           treemacs-project-follow-cleanup     nil
           treemacs-persist-file               (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
           treemacs-recenter-after-file-follow nil
           treemacs-recenter-after-tag-follow  nil
           treemacs-show-cursor                nil
           treemacs-show-hidden-files          t
           treemacs-silent-filewatch           nil
           treemacs-silent-refresh             nil
           treemacs-sorting                    'alphabetic-desc
           treemacs-space-between-root-nodes   t
           treemacs-tag-follow-cleanup         t
           treemacs-tag-follow-delay           1.5
           treemacs-width                      35)

          (treemacs-follow-mode t)
          (treemacs-filewatch-mode t)
          (treemacs-fringe-indicator-mode t)
          (pcase (cons (not (null (executable-find "git")))
                       (not (null (executable-find "python3"))))
            (`(t . t)
             (treemacs-git-mode 'deferred))
            (`(t . _)
             (treemacs-git-mode 'simple))))
        :bind
        (:map global-map
              ("M-0"       . treemacs-select-window)
              ("C-x t 1"   . treemacs-delete-other-windows)
              ("<f8>"      . treemacs)
              ("C-x t B"   . treemacs-bookmark)
              ("C-x t C-t" . treemacs-find-file)
              ("C-x t M-t" . treemacs-find-tag)))

      (use-package treemacs-projectile
        :after treemacs projectile)

      (use-package treemacs-icons-dired
        :after treemacs dired
        :config (treemacs-icons-dired-mode))

      (use-package treemacs-magit
        :after treemacs magit)

        (use-package lsp-treemacs
        :after treemacs
        :config
        (lsp-metals-treeview-enable t)
        (setq lsp-metals-treeview-show-when-views-received t)))

    (defun load-neotree ()
      (use-package neotree
        :config
        (setq neo-window-width 32
              neo-create-file-auto-open t
              neo-banner-message nil
              neo-show-updir-line t
              neo-window-fixed-size nil
              neo-vc-integration nil
              neo-mode-line-type 'neotree
              neo-smart-open t
              neo-show-hidden-files t
              neo-mode-line-type 'none
              neo-auto-indent-point t)
  ;;    (setq neo-theme (if (display-graphic-p) 'nerd 'arrow))
        (setq neo-theme (if (display-graphic-p) 'icons 'arrow))
        (setq neo-hidden-regexp-list '("venv" "\\.pyc$" "~$" "\\.git" "__pycache__" ".DS_Store"))
        (global-set-key [f8] 'neotree-toggle)))


    (cond
     ((string-equal system-type "usg-unix-v") ; UNIX System V
      (progn
        (setq-default tide-tsserver-executable "/export/home/andreas/npm/bin/tsserver")
        ;; We have a problem with graphics in OpenIndiana, thus we use the simpler neotree for it.
        ;; treemacs is also not working for Debian Stretch (emacs-25.1.1).
        (load-neotree)))

     ((string-equal system-type "gnu/linux")
      (progn
        (setq-default tide-tsserver-executable "/home/andreas/npm/bin/tsserver")
        (load-neotree)))

     ((string-equal system-type "darwin")
      (progn
        (setq-default tide-tsserver-executable "/Users/andreas/npm/bin/tsserver")

        ;; set keys for Apple keyboard, for emacs in OS X
        (setq mac-command-modifier 'super)   ; make cmd key do Super
        (setq mac-option-modifier  'meta)    ; make opt key do Meta
        (setq mac-control-modifier 'control) ; make Control key do Control
        ;;(setq ns-function-modifier 'hyper)   ; make Fn key do Hyper
        ;; I am using a German PC keyboard on my Mac so I have to leave the right option undefined in order to get {[]}\@~|²³
        (setq mac-right-option-modifier nil)
        ;; MacOS has bindings for <home> and <end> to *-of-buffer:
        (global-set-key (kbd "<home>") 'beginning-of-line)
        (global-set-key (kbd "C-<home>") 'beginning-of-buffer)
        (global-set-key (kbd "<end>") 'end-of-line)
        (global-set-key (kbd "C-<end>") 'end-of-buffer)
        (load-treemacs)))

     ((string-equal system-type "windows-nt") ; Microsoft Windows
      (progn
        (setq-default tide-tsserver-executable "c:/Users/andreas/AppData/Roaming/npm/bin/tsserver")
        ;; make PC keyboard's Win key or other to type Super or Hyper, for emacs running on Windows.
        (setq w32-pass-lwindow-to-system nil)
        (setq w32-lwindow-modifier 'super)    ; Left Windows key
        (setq w32-pass-rwindow-to-system nil)
        (setq w32-rwindow-modifier 'super)    ; Right Windows key
        (setq w32-pass-apps-to-system nil)
        (setq w32-apps-modifier 'hyper)       ; Menu/App key
        (load-treemacs))))

  (use-package exec-path-from-shell
    :config (when (memq window-system '(mac ns x))
              (exec-path-from-shell-initialize)))
#+END_SRC
* Holidays
#+BEGIN_SRC emacs-lisp
  (setq holiday-general-holidays
        '((holiday-fixed 1 1 "Neujahr")
          (holiday-fixed 5 1 "Tag der Arbeit")
          (holiday-fixed 10 3 "Tag der deutschen Einheit")))
  (setq holiday-christian-holidays
        '((holiday-fixed 12 25 "1. Weihnachtstag")
          (holiday-fixed 12 26 "2. Weihnachtstag")
          (holiday-fixed 1 6 "Heilige 3 Könige")
          (holiday-fixed 10 31 "Reformationstag")
          (holiday-fixed 11 1 "Allerheiligen")
          ;; Date of Easter calculation taken from holidays.el.
          (let* ((century (1+ (/ displayed-year 100)))
                 (shifted-epact (% (+ 14 (* 11 (% displayed-year 19))
                                      (- (/ (* 3 century) 4))
                                      (/ (+ 5 (* 8 century)) 25)
                                      (* 30 century))
                                   30))
                 (adjusted-epact (if (or (= shifted-epact 0)
                                         (and (= shifted-epact 1)
                                              (< 10 (% displayed-year 19))))
                                     (1+ shifted-epact)
                                   shifted-epact))
                 (paschal-moon (- (calendar-absolute-from-gregorian
                                   (list 4 19 displayed-year))
                                  adjusted-epact))
                 (easter (calendar-dayname-on-or-before 0 (+ paschal-moon 7))))
            (holiday-filter-visible-calendar
             (mapcar
              (lambda (l)
                (list (calendar-gregorian-from-absolute (+ easter (car l)))
                      (nth 1 l)))
              '(( -2 "Karfreitag")
                (  0 "Ostersonntag")
                ( +1 "Ostermontag")
                (+39 "Christi Himmelfahrt")
                (+49 "Pfingstsonntag")
                (+50 "Pfingstmontag")
                (+60 "Fronleichnam")))))))
  (setq calendar-holidays (append holiday-general-holidays holiday-christian-holidays))
#+END_SRC
* Server
#+BEGIN_SRC emacs-lisp
  (use-package server
    :config
    (unless (server-running-p) (server-start)))
#+END_SRC
